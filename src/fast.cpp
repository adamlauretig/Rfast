//Author: Manos Papadakis

// This file was generated by compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <vector>
#include <algorithm>
#include <string>

using namespace Rcpp;
using namespace internal;
using namespace std;
using namespace arma;

//the model.matrix form R but by collumn
mat design_matrix(CharacterVector x);
RcppExport SEXP Rfast_design_matrix(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< CharacterVector >::type x(xSEXP);
    __result = wrap(design_matrix(x));
    return __result;
END_RCPP
}

// logistic
vec logistic_only(mat x, colvec y);
RcppExport SEXP Rfast_logistic_only(SEXP xSEXP,SEXP ySEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< mat >::type x(xSEXP);
    traits::input_parameter< colvec >::type y(ySEXP);
    __result = wrap(logistic_only(x,y));
    return __result;
END_RCPP
}

// poisson
vec poisson_only(mat x, colvec y);
RcppExport SEXP Rfast_poisson_only(SEXP xSEXP,SEXP ySEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< mat >::type x(xSEXP);
    traits::input_parameter< colvec >::type y(ySEXP);
    __result = wrap(poisson_only(x,y));
    return __result;
END_RCPP
}

//regression
mat regression(DataFrame x, colvec y);
RcppExport SEXP Rfast_regression(SEXP xSEXP,SEXP ySEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< DataFrame >::type x(xSEXP);
    traits::input_parameter< colvec >::type y(ySEXP);
    __result = wrap(regression(x,y));
    return __result;
END_RCPP
}

// nth_element
double nth(vector<int> x, unsigned int elem);
RcppExport SEXP Rfast_nth(SEXP xSEXP,SEXP ySEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< vector<int> >::type x(xSEXP);
    traits::input_parameter< unsigned int >::type y(ySEXP);
    __result = wrap(nth(x,y));
    return __result;
END_RCPP
}

// colMedians
vector<double> colmeds(mat x);
RcppExport SEXP Rfast_colmeds(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< mat >::type x(xSEXP);
    __result = wrap(colmeds(x));
    return __result;
END_RCPP
}

// sort_mat
mat sort_mat(mat x);
RcppExport SEXP Rfast_sort_mat(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< mat >::type x(xSEXP);
    __result = wrap(sort_mat(x));
    return __result;
END_RCPP
}

// find the maximum value/index of its collumn
vector<double> colmax(NumericMatrix x,bool value=false);
RcppExport SEXP Rfast_colmax(SEXP xSEXP,SEXP ySEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< NumericMatrix >::type x(xSEXP);
    traits::input_parameter< bool >::type y(ySEXP);
    __result = wrap(colmax(x,y));
    return __result;
END_RCPP
}

// find the minimum value/index of its collumn
vector<double> colmin(NumericMatrix x,bool value=false);
RcppExport SEXP Rfast_colmin(SEXP xSEXP,SEXP ySEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< NumericMatrix >::type x(xSEXP);
    traits::input_parameter< bool >::type y(ySEXP);
    __result = wrap(colmin(x,y));
    return __result;
END_RCPP
}

//find which collumns are factors
vector<int> which_isFactor(DataFrame x);
RcppExport SEXP Rfast_which_isFactor(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< DataFrame >::type x(xSEXP);
    __result = wrap(which_isFactor(x));
    return __result;
END_RCPP
}

// part of the Compositional::diri.nr
vec diri_nr_type2(vec a1, vec a2, vec ma,double tol);
RcppExport SEXP Rfast_diri_nr_type2(SEXP a1SEXP,SEXP a2SEXP,SEXP maSEXP,SEXP tolSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< vec >::type a1(a1SEXP);
    traits::input_parameter< vec >::type a2(a2SEXP);
    traits::input_parameter< vec >::type ma(maSEXP);
    traits::input_parameter< double >::type tol(tolSEXP);
    __result = wrap(diri_nr_type2(a1,a2,ma,tol));
    return __result;
END_RCPP
}

//returns median of a vector
long double med(vec x);
RcppExport SEXP Rfast_med(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< vec >::type x(xSEXP);
    __result = wrap(med(x));
    return __result;
END_RCPP
}

List Hash_list(CharacterVector key,NumericVector x);
RcppExport SEXP Rfast_Hash_list(SEXP keySEXP,SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< CharacterVector >::type key(keySEXP);
    traits::input_parameter< NumericVector >::type x(xSEXP);
    __result = wrap(Hash_list(key,x));
    return __result;
END_RCPP
}

vector<int> generate_key_1(CharacterVector x);
RcppExport SEXP Rfast_generate_key_1(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< CharacterVector >::type x(xSEXP);
    __result = wrap(generate_key_1(x));
    return __result;
END_RCPP
}

vector<int> generate_key_2(CharacterVector x);
RcppExport SEXP Rfast_generate_key_2(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< CharacterVector >::type x(xSEXP);
    __result = wrap(generate_key_2(x));
    return __result;
END_RCPP
}

long double hash_find(List x,string value);
RcppExport SEXP Rfast_hash_find(SEXP xSEXP,SEXP valueSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< List >::type x(xSEXP);
    traits::input_parameter< string >::type value(valueSEXP);
    __result = wrap(hash_find(x,value));
    return __result;
END_RCPP
}

int Match(colvec x,double key);
RcppExport SEXP Rfast_Match(SEXP xSEXP,SEXP keySEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< vec >::type x(xSEXP);
    traits::input_parameter< double >::type key(keySEXP);
    __result = wrap(Match(x,key));
    return __result;
END_RCPP
}

mat Chol(mat x);
RcppExport SEXP Rfast_Chol(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< mat >::type x(xSEXP);
    __result = wrap(Chol(x));
    return __result;
END_RCPP
}

rowvec colmeans(NumericMatrix x);
RcppExport SEXP Rfast_colmeans(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< NumericMatrix >::type x(xSEXP);
    __result = wrap(colmeans(x));
    return __result;
END_RCPP
}

rowvec colsums(NumericMatrix x);
RcppExport SEXP Rfast_colsums(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< NumericMatrix >::type x(xSEXP);
    __result = wrap(colsums(x));
    return __result;
END_RCPP
}

colvec rowsums(NumericMatrix x);
RcppExport SEXP Rfast_rowsums(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< NumericMatrix >::type x(xSEXP);
    __result = wrap(rowsums(x));
    return __result;
END_RCPP
}

colvec rowmeans(NumericMatrix x);
RcppExport SEXP Rfast_rowmeans(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< NumericMatrix >::type x(xSEXP);
    __result = wrap(rowmeans(x));
    return __result;
END_RCPP
}

colvec rowMaxs(NumericMatrix x);
RcppExport SEXP Rfast_rowMaxs(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< NumericMatrix >::type x(xSEXP);
    __result = wrap(rowMaxs(x));
    return __result;
END_RCPP
}

colvec rowMins(NumericMatrix x);
RcppExport SEXP Rfast_rowMins(SEXP xSEXP) {
BEGIN_RCPP
    RObject __result;
    RNGScope __rngScope;
    traits::input_parameter< NumericMatrix >::type x(xSEXP);
    __result = wrap(rowMins(x));
    return __result;
END_RCPP
}
